{
open FSharp.Text.Lexing

let text (lexbuf: LexBuffer<_>) =
  LexBuffer<_>.LexemeString lexbuf

let newline (lexbuf: LexBuffer<_>) =
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

// auxiliary tokens:
let char        = ['a'-'z' 'A'-'Z']
let digit       = ['0'-'9']
let whitespace  = [' ' '\t' ]
let newline     = ('\n' | '\r' '\n')
let id          = char+ ('-' char+)*

// tokenizer rules:
rule tokenstream = parse
| id                { Parser.SYMBOL (text lexbuf) }
| "'"               { Parser.TICK}
| whitespace        { tokenstream lexbuf }
| newline           { newline lexbuf; tokenstream lexbuf }
| eof               { Parser.EOF }
| _                 { failwith ("ParseError" + (text lexbuf)) }
